- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`
- const mappingMessage = { name: 'should have at a minimum 1 character', firstName: 'should have at a minimum 1 character', lastName: 'should have at a minimum 1 character', password: 'should have at a minimum 8 characters: at least 1 special symbol, 1 digit, 1 lowercase and 1 uppercase letter', email: 'should be an email format', };

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, placeholder, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-floating.my-3(class=(errors[propertyName] && 'has-danger'))
    input(
      id= inputId
      name= getInputName(propertyName)
      class= classLine
      value= _.get(entity, propertyName, '')
      placeholder= placeholder
    )&attributes(attributes)
    label(
      for= inputId
    )= placeholder
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= mappingMessage[propertyName]

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
