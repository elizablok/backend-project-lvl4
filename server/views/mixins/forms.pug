- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, placeholder, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-floating.my-3(class=(errors[propertyName] && 'has-danger'))
    input(
      id= inputId
      name= getInputName(propertyName)
      class= classLine
      value= _.get(entity, propertyName, '')
      placeholder= placeholder
    )&attributes(attributes)
    label(
      for= inputId
    )= placeholder
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => t(message)).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin submitSm(form = null)
  input.btn.btn-primary.bg-gradient.mb-2(type='submit')&attributes(attributes)

mixin textarea(entity, propertyName, placeholder, errors = {})
  - inputId= getInputId(propertyName)
  - propertyErrors= _.get(errors, propertyName)
  - classLine= 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  .my-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= placeholder
    textarea(
      id= inputId
      name= getInputName(propertyName)
      class= classLine
      rows= "3"
    )&attributes(attributes)= _.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, propertyName, placeholder, errors = {}, options = {})
  - inputId= getInputId(propertyName)
  - propertyErrors= _.get(errors, propertyName)
  - classLine= 'form-select' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  .my-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= placeholder
    select(
      id= inputId
      name= getInputName(propertyName)
      class= classLine
    )&attributes(attributes)
      if !attributes.multiple
        option
      - selectOptions = entity[propertyName] ? [entity[propertyName]].flat().map((op) => op.id ? op.id : op) : []
      each option in options
        - isSelected = _.includes(selectOptions, option.id)
        option(value= option.id selected= isSelected)= option.name
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin checkbox(entity, propertyName, label, filterOpts)
  - inputId = getInputId(propertyName)
  .my-3.form-check
    input.form-check-input(
      id= inputId
      name= propertyName
      class= classLine
      type= 'checkbox'
      checked= filterOpts[propertyName]
    )
    label.form-check-label(
      for= inputId
    )= label

mixin filter(propertyName, label, options = {}, filterOpts)
  -inputId= getInputId(propertyName)
  .input-group.my-3
    label(
      for= inputId
    ).input-group-text= label
    select(
      id= inputId
      name= propertyName
    )&attributes(attributes).form-select
      option
      for option in options
        - isSelected = option.id===Number(filterOpts[propertyName])
        option(value= option.id selected= isSelected)= option.name